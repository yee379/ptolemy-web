<div class="row row-fluid">
  <div class="row span12">
    <h1>Port Graphs for <span id="device"><%= params[:device] %></span></h1> ordered by percent utilisation
  </div>
  <div class="pull-right">
    <div id="autoupdate" class="btn-group">
      <button type="button" class="btn btn-default">Auto Update</button>
    </div>
    <div id="step" class="btn-group">
      <button type="button" class="btn btn-default" id='60'>1min</button>
      <button type="button" class="btn btn-default" id='300'>5min</button>
      <button type="button" class="btn btn-default" id='1800'>30min</button>
      <button type="button" class="btn btn-default" id='3600'>1hour</button>
      <button type="button" class="btn btn-default" id='10800'>3hour</button>
      <button type="button" class="btn btn-default" id='21600'>6hour</button>
    </div>
  </div>

  <div id="horizon" class="row span12"></div>
</div>

<%= coffee_script_tag do %>

create_horizon = ( metrics, step, delay ) ->
  d = delay
  if not $(this).hasClass( 'btn-primary' )
    d = 0
  view = new HorizonView( '#horizon', delay=d*1000, step=step*1000 )
  view.add metrics
  return view


jQuery ->


  # set up bin sizes
  step = 300
  $('#step button#'+step).addClass( 'btn-primary' )

  view = null
  data = []
  
  # load the scoreboard of ports on the device
  $.ajax(
    url: "/api/ports/utilisations.json?period=" + step/60 + "&device=" + $('#device').text()
    type: 'GET'
    timeout: 5000
    data: {}
    complete: (e,xhr,settings) ->
    
      switch e.status
        when 200
          data = []
          seen = {}
          for i in e.responseJSON
            unless i.physical_port of seen
              seen[i.physical_port] = true
              # add
              count = 0
              m = i.device + '/' + i.physical_port.replace(/\//g,'.')
              data.push {
                  alias: i.physical_port
                  metric: 'port.util.out/' + m
                  height: 28
                  extent_max_ref: count + 1
                  klass: 'up'
              }
              data.push {
                  alias: ' '
                  metric: 'port.util.in/' + m
                  height: 28
                  extent_max_ref: count
                  multiply: -1
                  klass: 'down'
              }
              count = count + 2
    
    
          # initial
          view = create_horizon( data, step, step )
   
    
  )



  # change
  $('#step button').on( 'click', (e) ->
    # remove primary on others
    step = $(this)[0].id
    $('#step button').removeClass( 'btn-primary' )
    $(this).addClass( 'btn-primary' )
    view.destroy()
    view = create_horizon( data, step, step )
  ) 

  # auto update
  $('#autoupdate button').on( 'click', (e) ->
    if $(this).hasClass( 'btn-primary' )
      $(this).removeClass( 'btn-primary' )
    else
      $(this).addClass( 'btn-primary' )
    view.destroy()
    view = create_horizon( data, step, step )
  )  

  
<% end %>
