<div class="row row-fluid">
<% unless @layout == 'naked' %>
  <div class="row span12">
    <h1><span id="metric"></span></h1>
  </div>
  <div>
    <div class="pull-left">
      <p><span id="extra"><%= @extra %></span></p>
    </div>
    <div class="pull-right">
      <div id="autoupdate" class="btn-group">
        <button type="button" class="btn btn-default">Auto Update</button>
      </div>
      <div id="step" class="btn-group">
        <button type="button" class="btn btn-default" id='60'>1min</button>
        <button type="button" class="btn btn-default" id='300'>5min</button>
        <button type="button" class="btn btn-default" id='1800'>30min</button>
        <button type="button" class="btn btn-default" id='3600'>1hour</button>
        <button type="button" class="btn btn-default" id='10800'>3hour</button>
        <button type="button" class="btn btn-default" id='21600'>6hour</button>
      </div>
    </div>
  </div>
<% end %>
  <div id="horizon" class="row span12"></div>
</div>

<%= coffee_script_tag do %>

get_group = ( metric ) ->
  # let's try to group the metrics to provide more meaningful data
  bits = metric.split('/')

  # port data should have all useful port statistics
  if bits[0] == 'port'
    
    # do some wrangling to remove ports with '/'
    if bits.length > 3
      metric = bits[0] + '/' + bits[1] + '/' + bits.slice(2,bits.length+1).join('.')
    
    colours = ["#3182bd","#31a354"]
    colours_discards = ["#e5791e","#e5791e"]
    colours_errors = ["#ff4701","#ff4701"]
    
    return {
      delay: 60,
      step: 60,
      metrics: [
        {
          alias: 'out (bits)'
          metric: metric.replace('port','port.util.out')
          extent_max_ref:  '1'
          colours: colours
          height: 100
          klass: 'up'
        },
        {
          alias: 'in (bits)'
          metric: metric.replace('port','port.util.in')
          multiply: -1
          extent_max_ref:  '0'
          colours: colours
          height: 100
          klass: 'down'
        },
        {
          alias: 'unicast-out (pkts)'
          metric: metric.replace('port','port.unicastpkts.out')
          extent_max_ref:  '3'
          colours: colours
          height: 30
          klass: 'up'
        },
        {
          alias: 'unicast-in (pkts)'
          metric: metric.replace('port','port.unicastpkts.in')
          multiply: -1
          extent_max_ref:  '2'
          colours: colours
          height: 30
          klass: 'down'
        },
        {
          alias: 'broadcast-out (pkts)'
          metric: metric.replace('port','port.broadcastpkts.out')
          colours: colours
          extent_max_ref:  '5'
          height: 30
          klass: 'up'
        },
        {
          alias: 'broadcast-in (pkts)'
          metric: metric.replace('port','port.broadcastpkts.in')
          colours: colours
          extent_max_ref:  '4'
          multiply: -1
          height: 30
          klass: 'down'
        },
        {
          alias: 'multicast-out (pkts)'
          metric: metric.replace('port','port.multicastpkts.out')
          colours: colours
          extent_max_ref:  '7'
          multiply: 1
          height: 30
          klass: 'up'
        },
        {
          alias: 'multicast-in (pkts)'
          metric: metric.replace('port','port.multicastpkts.in')
          colours: colours
          extent_max_ref:  '6'
          multiply: -1
          height: 30
          klass: 'down'
        },

        {
          alias: 'crc-err (pkts)'
          metric: metric.replace('port','port.err.in')
          colours: colours_errors
          height: 30
        },

        {
          alias: 'discards-out (pkts)'
          metric: metric.replace('port','port.discards.out')
          colours: colours_discards
          extent_max_ref:  '10'
          height: 30
          klass: 'up'
        },
        {
          alias: 'discards-in (pkts)'
          metric: metric.replace('port','port.discards.in')
          extent_max_ref:  '9'
          multiply: -1
          colours: colours_discards
          height: 30
          klass: 'down'
        },

        {
          alias: 'error-out (pkts)'
          metric: metric.replace('port','port.error.out')
          colours: colours_errors
          extent_max_ref:  '12'
          height: 30
          klass: 'up'
        },
        {
          alias: 'error-in (pkts)'
          metric: metric.replace('port','port.error.in')
          multiply: -1
          extent_max_ref:  '11'
          colours: colours_errors
          height: 30
          klass: 'down'
        },
      ]
    }
     
  if bits[0] == 'utilisation'
    
    # do some wrangling to remove ports with '/'
    if bits.length > 3
      metric = bits[0] + '/' + bits[1] + '/' + bits.slice(2,bits.length+1).join('.')
    
    colours = ["#3182bd","#31a354"]
    
    return {
      delay: 300,
      step: 300,
      metrics: [
        {
          alias: 'out (bits)'
          metric: metric.replace('utilisation','port.util.out')
          extent_max_ref:  '1'
          colours: colours
          height: 50
          klass: 'up'
        },
        {
          alias: 'in (bits)'
          metric: metric.replace('utilisation','port.util.in')
          multiply: -1
          extent_max_ref:  '0'
          colours: colours
          height: 50
          klass: 'down'
        },
      ]
    }
      
  else if bits[0] == 'subnet'
    return {
      delay: 300,
      step: 300,
      metrics: [
        {
          alias: 'hosts (#)'
          colours: ["#3182bd","#31a354"]
          metric: metric.replace('subnet','subnet.count')
          height: 75
        },
        {
          alias: 'loss (%)'
          metric: metric.replace('subnet','subnet.loss')
          multiply: -1
          height: 50
        },
        {
          alias: 'min_rtt (ms)'
          metric: metric.replace('subnet','subnet.rtt')
          height: 50
        },
        {
          alias: 'jitter (ms)'
          metric: metric.replace('subnet','subnet.jitter')
          height: 50
        },
      ]
    }
      
  else if bits[0] == 'owamp'
    return {
      step: 300,
      delay: 300,
      metrics: [
        {
          alias: 'loss (fraction)'
          height: '35'
        },
        {
          alias: bits[1] + ' -> ' + bits[2]
          metric: bits[0].replace('owamp','owamp.loss')+'/'+bits[1]+'/'+bits[2]
          height: 50
        },
        {
          alias: bits[2] + ' -> ' + bits[1]
          metric: bits[0].replace('owamp','owamp.loss')+'/'+bits[2]+'/'+bits[1]
          multiply: -1
          height: 50
        },

        {
          alias: 'min (ms)'
          height: '35'
        },
        {
          alias: bits[1] + ' -> ' + bits[2]
          metric: bits[0].replace('owamp','owamp.min')+'/'+bits[1]+'/'+bits[2]
          height: 50
        },
        {
          alias: bits[2] + ' -> ' + bits[1]
          metric: bits[0].replace('owamp','owamp.min')+'/'+bits[2]+'/'+bits[1]
          multiply: -1
          height: 50
        },

        {
          alias: 'max-min (ms)'
          height: '35'
        },
        {
          alias: bits[1] + ' -> ' + bits[2]
          metric: bits[0].replace('owamp','owamp.jitter')+'/'+bits[1]+'/'+bits[2]
          multiply: -1
          height: 50
        },
        {
          alias: bits[2] + ' -> ' + bits[1]
          metric: bits[0].replace('owamp','owamp.jitter')+'/'+bits[2]+'/'+bits[1]
          multiply: -1
          height: 50
        }
      ]  
    }  
    
  else if bits[0] == 'bwctl'
    return {
      delay: 300,
      step: 3600,
      metrics: [
        {
          alias: 'throughput (bps)'
          height: '35'
        },
        {
          alias: bits[1] + ' -> ' + bits[2]
          metric: bits[0]+'/'+bits[1]+'/'+bits[2]
          height: 50
        },
        {
          alias: bits[2] + ' -> ' + bits[1]
          metric: bits[0]+'/'+bits[2]+'/'+bits[1]
          multiply: -1
          height: 50
        }
      ]
    }


  else if bits[0] == 'test'
    return {
      delay: 300,
      step: 3600,
      metrics: [
        {
          alias: bits[1] + ' -> ' + bits[2]
          metric: 'port.util.in/'+bits[1]+'/'+bits[2]
          # extent: [0,500000000]
          height: 250
        }
      ]
    }


  # default
  return {
    delay: 300,
    step: 300,
    metrics: [
      {
        metric: metric
        # scale: d3.scale.linear()
        height: 100   
      }   
    ]
  }

create_horizon = ( metrics, step, delay ) ->
  d = delay
  if not $('#autoupdate button').hasClass( 'btn-primary' )
    d = 0
  axis = [ 'top', 'bottom' ]
  <% unless @axis.nil? %>
  axis = ["<%= @axis %>"]
  <% end %>
  view = new HorizonView( '#horizon', delay=d*1000, step=step*1000, yaxis=true, axis=axis )
  view.add metrics
  return view

jQuery ->

  metric = $(location).attr('href').replace( /^.+\/graphs(\.\w+)?\//, '' )
  $('span#metric').text( metric )

  # get defaults
  meta = get_group( metric )

  # set up bin sizes
  step = meta['step']
  $('#step button#'+step).addClass( 'btn-primary' )

  # initial
  view = create_horizon( meta['metrics'], step, meta['delay'] )

  # change
  $('#step button').on( 'click', (e) ->
    # remove primary on others
    step = $(this)[0].id
    $('#step button').removeClass( 'btn-primary' )
    $(this).addClass( 'btn-primary' )
    view.destroy()
    view = create_horizon( meta['metrics'], step, meta['delay'] )
  ) 

  # auto update
  $('#autoupdate button').on( 'click', (e) ->
    if $(this).hasClass( 'btn-primary' )
      $(this).removeClass( 'btn-primary' )
    else
      $(this).addClass( 'btn-primary' )
    view.destroy()
    view = create_horizon( meta['metrics'], step, meta['delay'] )
  )  




  # ctx = cubism.context()
  #     .serverDelay(600000)
  #     .step(600000)
  #     .size( $('#cubism').width() )  
  # 
  # d3.select("#cubism").selectAll(".axis")
  #     .data(["top", "bottom"])
  #   .enter().append("div")
  #     .attr("class", (d) -> d + " axis" )
  #     .each( (d) -> d3.select(@).call(ctx.axis().ticks(20).orient(d) ) )
  # d3.select("#cubism").append("div")
  #     .attr("class", "rule")
  #     .call( ctx.rule() )
  # 
  # 
  # 
  # # server = ctx.graphite()
  # server = ctx.ptolemy()
  # metrics = [ server.metric("network.kpi.subnet.prefix.134.79.77.128.len.25.rtt") ]
  # 
  # d3.select("#cubism").selectAll(".horizon")
  #     .data( metrics )
  #   .enter().insert("div", ".bottom")
  #     .attr("class", "horizon")
  #   .call(
  #     ctx.horizon()
  #   )

  
<% end %>
