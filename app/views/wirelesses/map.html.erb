
<script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script>


<div class="row-fluid span12">
  <h1>Wireless Coverage</h1>
</div>

<div class="row-fluid span12">

  <div class="span3 btn-group" data-toggle="buttons-radio">
    <button type="button" class="btn btn-primary">Radio Frequency</button>
    <button type="button" class="btn">Number of Users</button>
    <button type="button" class="btn">Uplink Utilisation</button>
  </div>

  <div class="span3" style="visibility: hidden; position: absolute">
    <select class="input-small" id="influence-shape">
      <option value="hexagon" selected>Hexagon</option>
      <option value="square">Square</option>
    </select>
    influence <input class="input-small" id="influence-range" type="text" name="influence-range" value="0.0003"></input>
  </div>

  <div class="span6 pull-right" style="">
  frequencies: 
    <span class="label frequency-key frequency-2412">2412 <input id="frequency-2412" class="influence-checkbox" type="checkbox" name="frequency-2412" checked="checked"/></span>
    <span class="label frequency-key frequency-2437">2437 <input id="frequency-2437" class="influence-checkbox" type="checkbox" name="frequency-2437" checked="checked"/></span>
    <span class="label frequency-key frequency-2462">2462 <input id="frequency-2462" class="influence-checkbox" type="checkbox" name="frequency-2462" checked="checked"/></span>
    <span class="label frequency-key frequency-5180">5180 <input id="frequency-5180" class="influence-checkbox" type="checkbox" name="frequency-5180" checked="checked"/></span>
    <span class="label frequency-key frequency-5200">5200 <input id="frequency-5200" class="influence-checkbox" type="checkbox" name="frequency-5200" checked="checked"/></span>
    <span class="label frequency-key frequency-5220">5220 <input id="frequency-5220" class="influence-checkbox" type="checkbox" name="frequency-5220" checked="checked"/></span>
    <span class="label frequency-key frequency-5240">5240 <input id="frequency-5240" class="influence-checkbox" type="checkbox" name="frequency-5240" checked="checked"/></span>
  </div>

</div>

<div class="row">
  <div class="span12" id="map"></div>
</div>


<%= coffee_script_tag do %>

jQuery -> 
    hide_frequencies = {}
    fill_window '#map'

    # create map
    map = new google.maps.Map( d3.select("#map").node(), {
      zoom: 17,
      center: new google.maps.LatLng(37.4178, -122.205),
      mapTypeId: google.maps.MapTypeId.HYBRID
    })
    
    # Load the station data. When the data comes back, create an overlay.
    overlay = new google.maps.OverlayView()

    # allow toggle of influence items
    $('.influence-checkbox').on( 'change', () ->
        cls = $(this).attr('name')
        checked = $(this).is(':checked')

        if checked
            delete hide_frequencies[cls]
        else
            hide_frequencies[cls] = true
        console.log(hide_frequencies)

        overlay.draw();
    )

    # overlay to set
    projection = undefined

    dataset = [
        <% @wirelesses.each do |ap| %>
            {   
                name: "<%= ap.device %>" 
                lng: <%= ap.longitude %> 
                lat: <%= ap.latitude %>
                frequencies: <%= ap.frequencies.compact.to_s.html_safe %>
            },
        <% end %>
    ]
    
    # overlay doesn't draw stuff at negative, so we used css offsets to draw
    _recalc_coord = (d,projection) ->
        e = new google.maps.LatLng( d.lat, d.lng )
        f = projection.fromLatLngToDivPixel(e)
        o = $('.overlay')
        # console.log o.css('top')
        # overlay_top = -1 * parseInt o.css('top').replace('px','')
        # overlay_left = -1 * parseInt o.css('left').replace('px','')
        overlay_top = 4000
        overlay_left = 4000
        d.x = f.x + overlay_left
        d.y = f.y + overlay_top
        d
        
    recalc_coords = (data,projection) ->
        for i in [0..data.length-1]
            data[i] = _recalc_coord(data[i],projection)
        data            

    build_path = (path) ->
        'M' + path.join('L') + 'Z'
    
    # Add the container when the overlay is added to the map.
    overlay.onAdd = () ->
    
        panes = this.getPanes(); 
        # panes.overlayLayer.style['zIndex'] = 1000; 
    
        layer = d3.select(panes.overlayLayer)
            .append("div")
            .attr("class", "overlay")
            .append("svg:svg")
    
        markers = layer.append('g').attr("class",'marker_layer')
        influences = layer.append('g').attr("class","influence_layer")
    
        # draw something!
        overlay.draw = () ->
        
            console.log("redrawing overlay")

            map = this
            projection = this.getProjection()

            # update coordinates on our overlay
            dataset = recalc_coords(dataset,projection)

            influence_scale = d3.scale.quantize()
                .domain( [ $('#colour_min').val(), $('#colour_max').val() ] )
                .range(d3.range(0, 9))
            
            influence_class_by_area = (d,i) ->
                area = d3.geom.polygon(d).area()
                n = influence_scale(area)
                # console.log( n )
                'q' + n + '-9'
        
            _point_at2 = ( orig, bearing, distance ) ->
                R = 6378137.0
                bearing = parseFloat ( bearing * Math.PI ) / 180
                # console.log( orig )
                # convert lat/lng to radians
                lat1 = parseFloat ( orig.lat * Math.PI ) / 180
                lng1 = parseFloat ( orig.lng * Math.PI ) / 180
                az = distance / R
        
                a = Math.sin(lat1)*Math.cos(az)
                b = Math.cos(lat1)*Math.sin(az)*Math.cos(bearing)
                lat2 = Math.asin( a + b )
                c = Math.sin(bearing)*Math.sin(az)*Math.cos(lat1)
                d = Math.cos(az)-Math.sin(lat1)*Math.sin(lat2)
                lng2 = lng1 + Math.atan2(c, d)

                # convert back to lat/lng deg
                return {
                    lat: parseFloat lat2 * 180 / Math.PI
                    lng: parseFloat lng2 * 180 / Math.PI
                }
                
            _point_at = ( orig, bearing, distance ) ->
                # dumb but easy calculation of point
                a = parseFloat ( bearing * Math.PI ) / 180
                return {
                    lat: orig.lat + distance * Math.sin(a)
                    lng: orig.lng + distance * Math.cos(a)
                }
                
            path_for_influence = (d) -> 
                r = parseFloat $('#influence-range').val()
                shape = $('#influence-shape').val()
                latlngs = []

                if shape == 'hexagon'
                    a = [ 30, 90, 150, 210, 270, 330 ]
                    for i in [0..a.length-1]
                        p = _point_at( d, a[i], r )
                        latlngs.push( p )
                else if shape == 'square'
                    a = [ 45, 135, 225, 315 ];
                    for i in [0..a.length-1]
                        p = _point_at( d, a[i], r )
                        latlngs.push( p );
                else
                    console.log("unknown shape " + shape )
        
                path = []
                for i in [0..latlngs.length-1]
                    # console.log latlngs[i]
                    e = _recalc_coord( latlngs[i], projection )
                    path.push( [ e.x, e.y ] )
                build_path( path )

            frequency_colormap = (d) ->
                pre = 'frequency-'
                f = []
                for i in d.frequencies
                    c = pre + i
                    if not hide_frequencies.hasOwnProperty(c)
                        f.push( c )
                return f.join(" ")
            
            # create an influence polygon
            edges = influences.selectAll("path")
                    .data( dataset )
                    .attr("d", path_for_influence )
                    .attr("class", frequency_colormap )
                  .enter().append("svg:svg")
                    .append("svg:path")
                    .attr('id', (d) -> d.name )
                    .attr("d", path_for_influence )
                    .attr("class", frequency_colormap )
                    .append('title')
                      .text( (d) -> d.name )

            # update markers
            ap = markers.selectAll( "g" ).data( dataset )
            ap.attr("transform", (d) ->
                'translate('+d.x+','+d.y+')'
            )
            ap.enter() # new
                .append("svg:g")
                    .attr("class","marker")
                    .attr("transform", (d) ->
                        'translate('+d.x+','+d.y+')'
                    )
                ap.exit() # old/gone
                .remove()

            # add visible elements of marker
            ap.append("svg:circle")
                        .attr("r",4)
            # ap.append("svg:text")
            #             .attr("x",10)
            #             .attr("dy","0.3em")
            #             .text( (d) -> 
            #                 return d.name
            #             )


    # Bind our overlay to the mapâ€¦
    overlay.setMap(map)

<% end %>